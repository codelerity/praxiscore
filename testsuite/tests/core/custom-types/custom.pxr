@ /custom root:custom {
  .shared-code [map SHARED.Custom1 {package SHARED;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;
import org.praxislive.core.*;
import org.praxislive.core.types.*;
import org.praxislive.code.userapi.*;
import static org.praxislive.code.userapi.Constants.*;
public class Custom1 extends org.praxislive.core.code.CoreCodeDelegate {
    
    @P String message;
    
    @Out Output out;

    @Override
    public void starting() {
        out.send(message);
    }
    
}
} SHARED.Custom2 {package SHARED;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;
import org.praxislive.core.*;
import org.praxislive.core.types.*;
import org.praxislive.code.userapi.*;
import static org.praxislive.code.userapi.Constants.*;
public class Custom2 extends org.praxislive.core.code.CoreCodeDelegate {
    
    @In Input in;
    @Out Output out;

    @Override
    public void init() {
        in.valuesAs(PString.class)
                .map(PString::toString)
                .map(this::transform)
                .link(out::send);
    }
    
    protected String transform(String str) {
        return str;
    }
    
}
}]
  .code {    
    @Override
    @SupportedTypes(
            custom = {
                @CustomType(type = "core:custom1", base = SHARED.Custom1.class)
            }
    )
    public void init() {

    }
    
}
  @ ./exit core:custom {
    .meta [map graph.x 716 graph.y 50]
    .code {import org.praxislive.core.services.Services;
import org.praxislive.core.services.SystemManagerService;


    @T(1)
    void exitOK() {
        exit(0);
    }

    @T(2)
    void exitFail() {
        exit(1);
    }

    private void exit(int exitValue) {
        find(Services.class)
                .flatMap(s -> s.locate(SystemManagerService.class))
                .ifPresent(s -> tell(ControlAddress.of(s, "system-exit"), exitValue));
    }

}
  }
  @ ./container core:container {
    .meta [map graph.x 378 graph.y 50]
    .code {    
    @Override
    @ProxyPorts
    @SupportedTypes(
            system = false,
            custom = {
                @CustomType(type = "core:custom2", base = SHARED.Custom2.class)
            }
    )
    public void init() {

    }
    
}
    .ports [map in do-nothing!in out universe!out]
    @ ./do-nothing core:custom2 {
      .meta [map graph.x 141 graph.y 236]
    }
    @ ./uppercase core:custom2 {
      .meta [map graph.x 363 graph.y 236]
      .code {extends SHARED.Custom2;

    @Override
    protected String transform(String str) {
        return str.toUpperCase(Locale.ENGLISH);
    }
    
}
    }
    @ ./universe core:custom2 {
      .meta [map graph.x 594 graph.y 236]
      .code {extends SHARED.Custom2;

    @P @Config.Port(false) String match, replacement;
    
    @Override
    protected String transform(String str) {
        return str.replace(match, replacement);
    }

}
      .match WORLD
      .replacement UNIVERSE
    }
    ~ ./do-nothing!out ./uppercase!in
    ~ ./uppercase!out ./universe!in
  }
  @ ./custom1 core:custom1 {
    .meta [map graph.x 50 graph.y 50]
    .message "Hello World!"
  }
  @ ./test core:custom {
    .meta [map graph.x 573 graph.y 50]
    .code {
    @Out(1) Output ok;
    @Out(2) Output error;

    @P @Config.Port(false) String comparison;

    @In
    void test(String msg) {
        if (comparison.equals(msg)) {
            ok.send();
        } else {
            log(ERROR, "<FAIL> : Expected " + comparison + " but received " + msg);
            error.send();
        }
    }

}
    .comparison "HELLO UNIVERSE!"
  }
  @ ./delay core:timing:delay {
    .meta [map graph.x 225 graph.y 50]
    .time 0.01
  }
  ~ ./custom1!out ./delay!in
  ~ ./delay!out ./container!in
  ~ ./container!out ./test!test
  ~ ./test!ok ./exit!exit-ok
  ~ ./test!error ./exit!exit-fail
}
