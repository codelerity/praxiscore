@ /data1 root:data {
  #%praxis.version 5.5.0-SNAPSHOT
  @ ./exit core:custom {
    #%graph.x 583
    #%graph.y 100
    .code "import org.praxislive.core.services.Services;
import org.praxislive.core.services.SystemManagerService;


    @T(1)
    void exitOK() \{
        exit(0);
    \}

    @T(2)
    void exitFail() \{
        exit(1);
    \}

    private void exit(int exitValue) \{
        find(Services.class)
                .flatMap(s -> s.locate(SystemManagerService.class))
                .ifPresent(s -> tell(ControlAddress.of(s, \"system-exit\"), exitValue));
    \}

"
  }
  @ ./test1 core:custom {
    #%graph.x 124
    #%graph.y 74
    .code "

    String lowercase = \"hello world\";
    String uppercase = lowercase.toUpperCase(Locale.ROOT);

    @Out(1) Output ok;
    @Out(2) Output error;

    @Persist Async<Call> response;

    @Override
    public void update() \{
        if (response != null && response.done()) \{
            if (response.failed()) \{
                log(ERROR, \"<FAIL> \" + response.error());
                error.send();
            \} else \{
                String result = response.result().args().get(0).toString();
                if (!result.equals(uppercase)) \{
                    log(ERROR, \"<FAIL> expected \" + uppercase + \" but got \" + result);
                    error.send();
                \} else \{
                    log(INFO, \"Test 1 : OK\");
                    ok.send();
                \}
            \}
            response = null;
        \}
    \}

    @T(1)
    void test() \{
        log(INFO, \"Test 1 : Calling /data2/functions.uppercase\");
        response = ask(ControlAddress.of(\"/data2/functions.uppercase\"),
                List.of(V(lowercase)));
    \}


"
  }
  @ ./test2 core:custom {
    #%graph.x 124
    #%graph.y 211
    .code "

    String lowercase = \"hello world\";
    String uppercase = lowercase.toUpperCase(Locale.ROOT);

    @Out(1) Output ok;
    @Out(2) Output error;

    @Persist Async<Call> response;

    @Override
    public void update() \{
        if (response != null && response.done()) \{
            if (response.failed()) \{
                log(ERROR, \"<FAIL> \" + response.error());
                error.send();
            \} else \{
                String result = response.result().args().get(0).toString();
                if (!result.equals(uppercase)) \{
                    log(ERROR, \"<FAIL> expected \" + uppercase + \" but got \" + result);
                    error.send();
                \} else \{
                    log(INFO, \"Test 2 : OK\");
                    ok.send();
                \}
            \}
            response = null;
        \}
    \}

    @T(1)
    void test() \{
        log(INFO, \"Test 2 : Calling /data2/functions.uppercase with extra argument\");
        response = ask(ControlAddress.of(\"/data2/functions.uppercase\"),
                lowercase, \"extra argument\");
    \}


"
  }
  @ ./test3 core:custom {
    #%graph.x 124
    #%graph.y 348
    .code "

    String lowercase = \"hello world\";
    String uppercase = lowercase.toUpperCase(Locale.ROOT);

    @Out(1) Output ok;
    @Out(2) Output error;

    @Persist Async<Call> response;

    @Override
    public void update() \{
        if (response != null && response.done()) \{
            if (response.failed()) \{
                log(ERROR, \"<FAIL> \" + response.error());
                error.send();
            \} else \{
                if (!response.result().args().isEmpty()) \{
                    log(ERROR, \"<FAIL> expected no response args but received \"
                            + response.result().args());
                    error.send();
                \} else \{
                    log(INFO, \"Test 3 : OK\");
                    ok.send();
                \}
            \}
            response = null;
        \}
    \}

    @T(1)
    void test() \{
        log(INFO, \"Test 3 : Calling /data2/functions.no-op\");
        response = ask(ControlAddress.of(\"/data2/functions.no-op\"));
    \}


"
  }
  @ ./test4 core:custom {
    #%graph.x 124
    #%graph.y 485
    .code "

    @Out(1) Output ok;
    @Out(2) Output error;

    @Persist Async<Call> response;

    @Override
    public void update() \{
        if (response != null && response.done()) \{
            if (!response.failed()) \{
                log(ERROR,
                        \"<FAIL> exception expected but call completed successfully with args \"
                        + response.result().args()
                );
                error.send();
            \} else if (response.error().exceptionType()
                    != UnsupportedOperationException.class) \{
                log(ERROR, \"<FAIL> wrong exception received : \"
                        + response.error().exceptionType());
                error.send();
            \} else \{
                log(INFO, \"Test 4 : OK\");
                ok.send();
            \}
            response = null;
        \}
    \}

    @T(1)
    void test() \{
        log(INFO, \"Test 4 : Calling /data2/functions.error\");
        response = ask(ControlAddress.of(\"/data2/functions.error\"), \"FOO\");
    \}


"
  }
  ~ ./test1!error ./exit!exit-fail
  ~ ./test2!error ./exit!exit-fail
  ~ ./test1!ok ./test2!test
  ~ ./test2!ok ./test3!test
  ~ ./test3!ok ./test4!test
  ~ ./test3!error ./exit!exit-fail
  ~ ./test4!error ./exit!exit-fail
  ~ ./test4!ok ./exit!exit-ok
}
